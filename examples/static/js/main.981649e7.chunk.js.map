{"version":3,"sources":["examples/index.ts","actions/http.ts","actions/timer.ts","actions/rng.ts","actions/websocket.ts","actions/index.ts","components/Example.tsx","components/Nav.tsx","components/Action.tsx","components/TopBar.tsx","components/View.tsx","components/util.ts","App.tsx","serviceWorker.ts","reducers/http.ts","reducers/timer.ts","reducers/rng.ts","reducers/websocket.ts","reducers/index.ts","index.tsx","store.ts","examples/http.js","examples/timer.js","examples/rng.js","examples/socket.js"],"names":["http","require","default","timer","rng","socket","fetchTodo","intent","createStandardAction","success","failure","startTimer","stopAllTimers","tick","generateRandomNumber","result","connectWebSocket","subscribeToCurrencyInfo","disconnectWebSocket","connected","disconnected","messageReceived","error","messageSent","SectionTitle","_ref2","children","react_default","a","createElement","Box","textAlign","mt","Typography","variant","component","Source","_ref3","language","style","tomorrowNightEighties","tomorrow","default_highlight","customStyle","fontSize","lineHeight","padding","border","normalizeState","state","opts","filteredState","agentStateVisible","tasks","rest","Object","objectWithoutProperties","normalizedState","keys","forEach","key","formatState","JSON","stringify","Example","_ref","source","actions","title","description","referenceUrl","_useState","useState","_useState2","slicedToArray","tabIndex","setTabIndex","_useState3","_useState4","startRecording","setStartRecording","_useState5","_useState6","snapshots","setSnapshots","_useState7","_useState8","snapshotsSeen","setSnapshotsSeen","_useState9","_useState10","setAgentStateVisible","Date","now","length","prev","concat","toConsumableArray","showAgentStateCheckbox","FormControlLabel","control","Checkbox","checked","onChange","e","currentTarget","label","mb","color","fontWeight","gutterBottom","Grid","container","spacing","item","xs","sm","Example_SectionTitle","Example_Source","Link","href","pt","onClick","Tabs","value","_event","newIndex","Tab","Badge","badgeContent","Fragment","map","s","i","jsonDiff","slice","pop","useStyles","makeStyles","theme","root","defineProperty","marginBottom","position","top","paddingRight","breakpoints","down","header","list","margin","listStyleType","& > li","& > li > ul","paddingLeft","back","&:before","content","display","left","TableOfContents","sections","current","classes","className","entries","Action","disabled","Button","marginTop","fullWidth","TopBar","AppBar","Toolbar","ml","mr","src","width","height","alt","SECTIONS","#http","#rng","#timer","#socket","App","dispatch","useDispatch","useSelector","socketActive","liveCurrencyUpdates","active","hash","setHash","useEventListener","target","location","window","useLocationHash","useEffect","scrollTo","section","includes","CssBaseline","components_TopBar","Container","maxWidth","md","Nav","lg","components_Example","components_Action","examples","View","Boolean","hostname","match","reducer","action","produce","draft","type","getType","addTask","method","url","httpTodoItem","payload","interval","timerCounter","delTasks","t","randomNumber","op","connect","disconnect","message","data","event","pair","subscription","name","sent","events","unshift","reduceReducers","httpDemoReducer","timerDemoReducer","rngDemoReducer","websocketDemoReducer","taskReducer","store","preloadedState","middlewares","enhancer","composeWithDevTools","applyMiddleware","apply","createStore","subscribe","configureAgents","createHttpAgent","createStorageAgent","createSocketAgent","createTimerAgent","createRngAgent","configureStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","__webpack_require__","r","__webpack_exports__"],"mappings":"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","file":"static/js/main.981649e7.chunk.js","sourcesContent":["// eslint-disable-next-line\nexport const http = require('!raw-loader!./http.js').default\n\n// eslint-disable-next-line\nexport const timer = require('!raw-loader!./timer.js').default\n\n// eslint-disable-next-line\nexport const rng = require('!raw-loader!./rng.js').default\n\n// eslint-disable-next-line\nexport const socket = require('!raw-loader!./socket.js').default\n","import { createStandardAction } from 'typesafe-actions'\n\nexport const fetchTodo = {\n  intent: createStandardAction(\n    'FETCH_TODO'\n  )<void>(),\n\n  success: createStandardAction(\n    'FETCH_TODO_SUCCESS'\n  )<any>(),\n\n  failure: createStandardAction(\n    'FETCH_TODO_FAILURE'\n  )<void>()\n}\n","import { createStandardAction } from 'typesafe-actions'\n\nexport const startTimer = createStandardAction(\n  'START_TIMER'\n)<void>()\n\nexport const stopTimer = createStandardAction(\n  'STOP_TIMER'\n)<void>()\n\nexport const stopAllTimers = createStandardAction(\n  'STOP_ALL_TIMERS'\n)<void>()\n\nexport const tick = createStandardAction(\n  'TIMER_TICK'\n)<void>()\n","import { createStandardAction } from 'typesafe-actions'\n\nexport const generateRandomNumber = {\n  intent: createStandardAction(\n    'RANDOM_NUMBER'\n  )<void>(),\n\n  result: createStandardAction(\n    'RANDOM_NUMBER_RESULT'\n  )<number>()\n}\n","import { createStandardAction } from 'typesafe-actions'\n\nexport const connectWebSocket = createStandardAction(\n  'CONNECT_WEB_SOCKET'\n)<void>()\n\nexport const subscribeToCurrencyInfo = createStandardAction(\n  'SUBSCRIBE_TO_CURRENCY_INFO'\n)<void>()\n\nexport const disconnectWebSocket = createStandardAction(\n  'DISCONNECT_WEB_SOCKET'\n)<void>()\n\nexport const socket = {\n  connected: createStandardAction('SOCKET_CONNECTED')<void>(),\n  disconnected: createStandardAction('SOCKET_DISCONNECTED')<void>(),\n  messageReceived: createStandardAction('SOCKET_MESSAGE_RECEIVED')<any>(),\n  error: createStandardAction('SOCKET_ERROR')<void>(),\n  messageSent: createStandardAction('SOCKET_MESSAGE_SENT')<void>()\n}\n","import { createStandardAction } from 'typesafe-actions'\n\nexport * from 'actions/http'\nexport * from 'actions/timer'\nexport * from 'actions/rng'\nexport * from 'actions/websocket'\n\nexport const reset = createStandardAction(\n  'RESET'\n)<void>()\n","import { diffString as jsonDiff } from 'json-diff'\nimport React, { useState } from 'react'\nimport SyntaxHighlighter from 'react-syntax-highlighter'\nimport tomorrowNightEighties from 'react-syntax-highlighter/dist/esm/styles/hljs/tomorrow-night-eighties'\nimport tomorrow from 'react-syntax-highlighter/dist/esm/styles/hljs/tomorrow'\nimport Link from '@material-ui/core/Link'\nimport Box from '@material-ui/core/Box'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport Typography from '@material-ui/core/Typography'\nimport Badge from '@material-ui/core/Badge'\nimport Grid from '@material-ui/core/Grid'\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\n\ninterface Props {\n  source: string\n  title: string\n  actions: any\n  state: any\n  description?: string | React.ReactElement\n  referenceUrl: string\n}\n\nconst RECORDING_DURATION = 3000\n\nconst Example: React.FunctionComponent<Props> = ({\n  source, actions, title, state, description, referenceUrl\n}) => {\n  const [tabIndex, setTabIndex] = useState(0)\n  const [startRecording, setStartRecording] = useState(-1)\n  const [snapshots, setSnapshots] = useState<any[]>([])\n  const [snapshotsSeen, setSnapshotsSeen] = useState(false)\n  const [agentStateVisible, setAgentStateVisible] = useState(false)\n\n  const handleChange = (_event: React.ChangeEvent<{}>, newIndex: number) => {\n    setTabIndex(newIndex)\n  }\n\n  const handleActionClick = () => {\n    setSnapshotsSeen(false)\n    setStartRecording(Date.now())\n    setSnapshots([state])\n  }\n\n  if ((Date.now() - startRecording) < RECORDING_DURATION) {\n    if (state !== snapshots[snapshots.length - 1]) {\n      setSnapshots((prev) => {\n        return [...prev, state]\n      })\n    }\n  }\n\n  const showAgentStateCheckbox = (\n    <FormControlLabel\n      control={\n        <Checkbox\n          checked={agentStateVisible}\n          onChange={\n            (e) => setAgentStateVisible(e.currentTarget.checked)}\n        />}\n      label='Show state slice managed by/reserved to agent' />\n  )\n\n  return (\n    <Box>\n      <Box textAlign='left' mb={2}>\n        <Typography variant='h4' color='textSecondary' style={{ fontWeight: 300 }} gutterBottom>\n          {title}\n        </Typography>\n\n        <Typography variant='body2'>\n          {description}\n        </Typography>\n      </Box>\n\n      <hr />\n\n      <Grid container spacing={2}>\n        <Grid item xs={12} sm={6}>\n          <SectionTitle>Reducer</SectionTitle>\n          <Source language='javascript'>{source}</Source>\n          <Typography variant='body2' component='p'>\n            Find out more about available tasks in the <Link href={referenceUrl}>agent reference</Link>.\n          </Typography>\n\n        </Grid>\n\n        <Grid item xs={12} sm={6}>\n          <SectionTitle>Actions</SectionTitle>\n\n          <Box pt={1} onClick={handleActionClick}>\n            {actions}\n          </Box>\n\n          <Typography variant='body2'>\n            <em>Tip: open the browser console to see actions as\n              they are dispatched.</em>\n          </Typography>\n\n          <SectionTitle>State</SectionTitle>\n\n          <Tabs variant='fullWidth' value={tabIndex} onChange={handleChange}>\n            <Tab label='Live' />\n            <Tab\n              onClick={() => setSnapshotsSeen(true)}\n              label={(snapshots.length > 0 && !snapshotsSeen)\n                ? (<Badge badgeContent={snapshots.length} color='secondary'>Log</Badge>)\n                : 'History'} />\n          </Tabs>\n\n          {tabIndex === 0 &&\n            <>\n              {showAgentStateCheckbox}\n              <Source language='json'>\n                {formatState(normalizeState(state, { agentStateVisible }))}\n              </Source>\n            </>}\n\n          {tabIndex === 1 && snapshots.length > 0 &&\n            <>\n              {showAgentStateCheckbox}\n\n              {snapshots.map((s, i) => i === 0\n                ? <Source key={i} language='json'>\n                  {formatState(normalizeState(s, { agentStateVisible }))}\n                </Source>\n                : <Source key={i} language='diff'>\n                  {jsonDiff(\n                    normalizeState(snapshots[i - 1], { agentStateVisible }),\n                    normalizeState(s, { agentStateVisible }), { color: false })}\n                </Source>)}\n\n              <Source key={snapshots.length} language='json'>\n                {formatState(normalizeState(snapshots.slice().pop(),\n                  { agentStateVisible }))}\n              </Source>\n            </>}\n        </Grid>\n      </Grid>\n    </Box>\n  )\n}\n\nconst SectionTitle: React.FC<{}> = ({ children }) => (\n  <Box textAlign='center' mt={2}>\n    <Typography variant='caption' component='em'>{children}</Typography>\n  </Box>\n)\n\nconst Source: React.FC<{ language: string }> = ({ language, children }) => {\n  const materialMkdocsCodehiliteStyle = {\n    fontSize: '0.85rem',\n    lineHeight: 1.4,\n    padding: '0.5rem',\n    border: '1px solid #eee'\n  }\n\n  const style = language === 'javascript'\n    ? tomorrowNightEighties\n    : tomorrow\n\n  return (\n    <SyntaxHighlighter language={language} style={style}\n      customStyle={materialMkdocsCodehiliteStyle}>\n      {children}\n    </SyntaxHighlighter>\n  )\n}\n\nconst normalizeState = (state: any, opts: { agentStateVisible: boolean }) => {\n  let filteredState: any\n\n  if (opts && opts.agentStateVisible) {\n    filteredState = state\n  } else {\n    const { tasks, ...rest } = state\n    filteredState = rest\n  }\n\n  const normalizedState: any = {}\n  Object.keys(filteredState).forEach((key) => {\n    normalizedState[key] = filteredState[key]\n  })\n\n  return normalizedState\n}\n\nconst formatState = (state: any) =>\n  JSON.stringify(state, null, 2)\n\nexport default Example\n","import React from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport Link from '@material-ui/core/Link'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginBottom: theme.spacing(4),\n    position: 'sticky',\n    top: theme.spacing(8),\n    paddingRight: theme.spacing(1),\n    [theme.breakpoints.down('md')]: {\n      position: 'static'\n    }\n  },\n\n  header: {\n    fontWeight: 'bold',\n    marginBottom: theme.spacing(1)\n  },\n\n  list: {\n    padding: 0,\n    margin: 0,\n    listStyleType: 'none',\n    '& > li': {\n      marginBottom: theme.spacing(1)\n    },\n    '& > li > ul': {\n      paddingLeft: theme.spacing(1)\n    }\n  },\n\n  back: {\n    '&:before': {\n      content: '\"←\"',\n      display: 'inline-block',\n      position: 'absolute',\n      left: '-1rem',\n    }\n  }\n}))\n\nconst TableOfContents: React.FunctionComponent<{\n  sections: { [href: string]: string },\n  current: string\n}> = ({ sections, current }) => {\n  const classes = useStyles()\n\n  return (\n    <nav className={classes.root}>\n      <Typography variant='body2' component='ul' className={classes.list}>\n        <li className={classes.back}>\n          <Link href='/' color='inherit'>Back to Docs</Link>\n        </li>\n\n        <li>Examples</li>\n\n        <li>\n          <Typography variant='body2' component='ul' className={classes.list}>\n            {Object.entries(sections).map(([href, title]) => (\n              <li key={href}>\n                <Link href={href}\n                  color={href === current ? 'primary' : 'inherit'}>\n                  {title}\n                </Link>\n              </li>\n            ))}\n          </Typography>\n        </li>\n      </Typography>\n    </nav>\n  )\n}\n\nexport default TableOfContents\n","import React from 'react'\nimport Button from '@material-ui/core/Button'\n\nconst Action: React.FC<{\n  label: String\n  onClick(): void\n  disabled?: boolean\n}> = ({ label, onClick, disabled }) => (\n  <Button\n    onClick={onClick}\n    style={{ marginTop: '0.5rem' }}\n    disabled={disabled}\n    variant='contained'\n    color='primary'\n    fullWidth>\n    {label}\n  </Button>\n)\n\nexport default Action\n","import React from 'react'\nimport Box from '@material-ui/core/Box'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport Link from '@material-ui/core/Link'\n\nexport const TopBar: React.FC = () => (\n  <AppBar position='fixed' color='primary'>\n    <Toolbar variant='dense'>\n      <Box ml={2} mr={3}>\n        <img src='https://redux-agent.org/images/logo.svg'\n          width={24} height={24} alt='Redux Agent' />\n      </Box>\n      <Typography variant='body1' style={{ fontWeight: 400 }} color='inherit'>\n        <Link href='/' color='inherit'>Redux Agent</Link>\n      </Typography>\n    </Toolbar>\n  </AppBar>\n)\n\nexport default TopBar\n","import React, { useEffect } from 'react'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Grid from '@material-ui/core/Grid'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Container from '@material-ui/core/Container'\nimport Box from '@material-ui/core/Box'\nimport * as examples from 'examples'\nimport { State } from '../types'\nimport * as actions from '../actions'\nimport { useLocationHash } from './util'\nimport Example from './Example'\nimport Nav from './Nav'\nimport Action from './Action'\nimport TopBar from './TopBar'\n\nexport const SECTIONS = {\n  '#http': 'HTTP Requests',\n  '#rng': 'Random Number Generation',\n  '#timer': 'Timers',\n  '#socket': 'WebSocket Messaging'\n}\n\nexport type Section = keyof typeof SECTIONS\n\nconst App: React.FunctionComponent<{}> = () => {\n  const dispatch = useDispatch()\n  const state = useSelector(state => state)\n  const socketActive = useSelector(\n    (state: State) => state.liveCurrencyUpdates.active)\n  const hash = useLocationHash()\n  useEffect(\n    () => { window.scrollTo(0, 0) }, [hash])\n\n  const section = Object.keys(SECTIONS).includes(hash)\n    ? hash as Section\n    : '#http'\n\n  return (\n    <div>\n      <CssBaseline />\n      <TopBar />\n      <Container maxWidth='lg'>\n        <Box mt={12} />\n\n        <Grid container>\n          <Grid item md={2}>\n            <Nav current={section} sections={SECTIONS} />\n          </Grid>\n\n          <Grid item md={10} lg={9}>\n            {section === '#http' &&\n              <Example\n                title='Example: HTTP Request'\n                description='Goal: Fetch a to-do item from a REST API.'\n                actions={\n                  <Action\n                    label='FETCH TODO'\n                    onClick={() => dispatch(actions.fetchTodo.intent())} />}\n                state={state}\n                source={examples.http}\n                referenceUrl='/reference/http/'\n              />}\n\n            {section === '#timer' &&\n              <Example\n                title='Example: Timer'\n                description='Goal: Receive an action every 500ms.'\n                actions={\n                  <>\n                    <Action\n                      label='START TIMER'\n                      onClick={() => dispatch(actions.startTimer())} />\n                    <Action\n                      label='STOP ALL TIMERS'\n                      onClick={() => dispatch(actions.stopAllTimers())} />\n                  </>}\n                state={state}\n                source={examples.timer}\n                referenceUrl='/reference/timer/'\n              />}\n\n            {section === '#rng' &&\n              <Example\n                title='Example: Random Number Generation'\n                description='Goal: Generate a random number.'\n                actions={\n                  <Action\n                    label='GENERATE RANDOM NUMBER'\n                    onClick={() => dispatch(actions.generateRandomNumber.intent())} />}\n                state={state}\n                source={examples.rng}\n                referenceUrl='/reference/random-number-generator/'\n              />}\n\n            {section === '#socket' &&\n              <Example\n                title='Example: WebSocket'\n                description='Goal: Receive live currency updates.'\n                actions={<>\n                  <Action\n                    label='CONNECT WEB SOCKET'\n                    onClick={() => dispatch(actions.connectWebSocket())}\n                    disabled={socketActive} />\n                  <Action\n                    label='SUBSCRIBE TO CURRENCY INFO'\n                    onClick={() => dispatch(actions.subscribeToCurrencyInfo())}\n                    disabled={!socketActive} />\n                  <Action\n                    label='DISCONNECT WEB SOCKET'\n                    onClick={() => dispatch(actions.disconnectWebSocket())}\n                    disabled={!socketActive} />\n                </>}\n                state={state}\n                source={examples.socket}\n                referenceUrl='/reference/websocket/'\n              />}\n          </Grid>\n        </Grid>\n\n        <Box mb={4} />\n      </Container>\n    </div>\n  )\n}\n\nexport default App\n","import { useState } from 'react';\nimport useEventListener from '@use-it/event-listener';\nexport const useLocationHash = () => {\n  const [hash, setHash] = useState<string | null>(null);\n  useEventListener('hashchange', (e) => {\n    // @ts-ignore\n    setHash(e.target.location.hash);\n  });\n  return hash || window.location.hash;\n};\n","import React from 'react'\nimport View from './components/View'\n\nconst App: React.FunctionComponent<{}> = () => (\n  <View />\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { getType } from 'typesafe-actions'\nimport produce from 'immer'\nimport { addTask } from 'redux-agent'\nimport { State, Action } from '../types'\nimport * as actions from '../actions'\n\nconst reducer = (\n  state: State,\n  action: Action\n): State => produce(state, (draft: State) => {\n  switch (action.type) {\n    case getType(actions.fetchTodo.intent): {\n      addTask(draft, {\n        type: 'http',\n        method: 'get',\n        url: 'https://jsonplaceholder.typicode.com/todos/1',\n        actions: {\n          success: getType(actions.fetchTodo.success),\n          failure: getType(actions.fetchTodo.failure)\n        }\n      })\n      return\n    }\n\n    case getType(actions.fetchTodo.success): {\n      draft.httpTodoItem = action.payload\n      return\n    }\n  }\n})\n\nexport default reducer\n","import { getType } from 'typesafe-actions'\nimport produce from 'immer'\nimport { addTask, delTasks } from 'redux-agent'\nimport { State, Action } from '../types'\nimport * as actions from '../actions'\n\nconst reducer = (\n  state: State,\n  action: Action\n): State => produce(state, (draft: State) => {\n  switch (action.type) {\n    case getType(actions.startTimer): {\n      addTask(draft, {\n        type: 'timer',\n        interval: 500,\n        actions: {\n          tick: getType(actions.tick)\n        }\n      })\n      return\n    }\n\n    case getType(actions.tick): {\n      draft.timerCounter += 1\n      return\n    }\n\n    case getType(actions.stopAllTimers): {\n      delTasks(draft, (t) => t.type === 'timer')\n      return\n    }\n  }\n})\n\nexport default reducer\n","import { getType } from 'typesafe-actions'\nimport produce from 'immer'\nimport { addTask } from 'redux-agent'\nimport { State, Action } from '../types'\nimport * as actions from '../actions'\n\nconst reducer = (\n  state: State,\n  action: Action\n): State => produce(state, (draft: State) => {\n  switch (action.type) {\n    case getType(actions.generateRandomNumber.intent): {\n      addTask(draft, {\n        type: 'rng',\n        actions: {\n          result: getType(actions.generateRandomNumber.result)\n        }\n      })\n      return\n    }\n\n    case getType(actions.generateRandomNumber.result): {\n      draft.randomNumber = action.payload\n      return\n    }\n  }\n})\n\nexport default reducer\n","import { getType } from 'typesafe-actions'\nimport produce from 'immer'\nimport { addTask, delTasks } from 'redux-agent'\nimport { State, Action } from '../types'\nimport * as actions from '../actions'\n\nconst reducer = (\n  state: State,\n  action: Action\n): State => produce(state, (draft: State) => {\n  switch (action.type) {\n    case getType(actions.connectWebSocket): {\n      addTask(draft, {\n        type: 'socket',\n        op: 'listen',\n        url: 'wss://ws-beta.kraken.com/',\n        actions: {\n          connect: getType(actions.socket.connected),\n          disconnect: getType(actions.socket.disconnected),\n          error: getType(actions.socket.error),\n          message: getType(actions.socket.messageReceived)\n        }\n      })\n      return\n    }\n\n    case getType(actions.subscribeToCurrencyInfo): {\n      addTask(draft, {\n        type: 'socket',\n        op: 'send',\n        data: {\n          event: 'subscribe',\n          pair: ['XBT/USD', 'XBT/EUR'],\n          subscription: { name: 'ticker' }\n        },\n        actions: {\n          sent: getType(actions.socket.messageSent)\n        }\n      })\n      return\n    }\n\n    case getType(actions.disconnectWebSocket): {\n      delTasks(draft, (t) => t.type === 'socket')\n      return\n    }\n\n    case getType(actions.socket.disconnected): {\n      draft.liveCurrencyUpdates.active = false\n      return\n    }\n\n    case getType(actions.socket.connected): {\n      draft.liveCurrencyUpdates.active = true\n      return\n    }\n\n    case getType(actions.socket.messageReceived): {\n      if (draft.liveCurrencyUpdates.events.length === 4) {\n        draft.liveCurrencyUpdates.events.pop()\n      }\n      draft.liveCurrencyUpdates.events.unshift(action.payload)\n      return\n    }\n  }\n})\n\nexport default reducer\n","import { reduceReducers, taskReducer } from 'redux-agent'\nimport { State } from 'types'\nimport httpDemoReducer from './http'\nimport timerDemoReducer from './timer'\nimport rngDemoReducer from './rng'\nimport websocketDemoReducer from './websocket'\n\nconst initialState: State = {\n  httpTodoItem: null,\n  timerCounter: 0,\n  randomNumber: null,\n  liveCurrencyUpdates: {\n    active: false,\n    events: []\n  }\n}\n\nconst reducer = reduceReducers(\n  // @ts-ignore\n  initialState,\n  httpDemoReducer,\n  timerDemoReducer,\n  rngDemoReducer,\n  websocketDemoReducer,\n  taskReducer\n)\n\nexport default reducer\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { configureStore } from './store'\nimport 'typeface-roboto-mono'\n\nconst store = configureStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { createLogger } from 'redux-logger'\nimport {\n  configureAgents,\n  createHttpAgent,\n  createStorageAgent,\n  createSocketAgent,\n  createTimerAgent,\n  createRngAgent\n} from 'redux-agent'\nimport reducer from './reducers'\nimport { State } from './types'\n\nexport const configureStore = (preloadedState?: State) => {\n  const middlewares = []\n\n  if (process.env.NODE_ENV === 'development') {\n    middlewares.push(createLogger({ collapsed: () => true }))\n  }\n\n  const enhancer = '__REDUX_DEVTOOLS_EXTENSION__' in window\n    ? composeWithDevTools(applyMiddleware(...middlewares))\n    : applyMiddleware(...middlewares)\n\n  const store = createStore(\n    reducer as any,\n    // \"as any\": https://github.com/reduxjs/redux/issues/2808\n    preloadedState as any,\n    enhancer)\n\n  store.subscribe(configureAgents([\n    createHttpAgent(),\n    createStorageAgent(),\n    createSocketAgent(),\n    createTimerAgent(),\n    createRngAgent()\n  ], store))\n\n  return store\n}\n","export default \"import {\\n  addTask, reduceReducers, taskReducer\\n} from 'redux-agent'\\n\\nconst reducer = (state, action) => {\\n  switch (action.type) {\\n    case 'FETCH_TODO':\\n      return addTask(state, {\\n        type: 'http',\\n        method: 'get',\\n        url: 'https://jsonplaceholder.typicode.com/todos/1',\\n        actions: {\\n          success: 'FETCH_TODO_SUCCESS',\\n          failure: 'FETCH_TODO_FAILURE'\\n        }\\n      })\\n\\n    case 'FETCH_TODO_SUCCESS':\\n      return {\\n        ...state,\\n        httpTodoItem: action.payload\\n      }\\n\\n    default:\\n      return state\\n  }\\n}\\n\\nexport default reduceReducers(reducer, taskReducer)\\n\"","export default \"import {\\n  addTask, delTasks, reduceReducers, taskReducer\\n} from 'redux-agent'\\n\\nconst reducer = (state, action) => {\\n  switch (action.type) {\\n    case 'START_TIMER':\\n      return addTask(state, {\\n        type: 'timer',\\n        interval: 500,\\n        actions: {\\n          tick: 'TICK'\\n        }\\n      })\\n\\n    case 'TICK':\\n      return {\\n        ...state,\\n        counter: state.counter + 1\\n      }\\n\\n    case 'STOP_ALL_TIMERS':\\n      return delTasks(state,\\n        (t) => t.type === 'timer')\\n\\n    default:\\n      return state\\n  }\\n}\\n\\nexport default reduceReducers(reducer, taskReducer)\\n\"","export default \"import {\\n  addTask, reduceReducers, taskReducer\\n} from 'redux-agent'\\n\\nconst reducer = (state, action) => {\\n  switch (action.type) {\\n    case 'RANDOM_NUMBER':\\n      return addTask(state, {\\n        type: 'rng',\\n        actions: {\\n          result: 'RANDOM_NUMBER_RESULT'\\n        }\\n      })\\n\\n    case 'RANDOM_NUMBER_RESULT':\\n      return {\\n        ...state,\\n        randomNumber: action.payload\\n      }\\n\\n    default:\\n      return state\\n  }\\n}\\n\\nexport default reduceReducers(reducer, taskReducer)\\n\"","export default \"import {\\n  addTask, delTasks, reduceReducers, taskReducer\\n} from 'redux-agent'\\n\\nconst MAX_EVENTS = 4\\n\\nconst reducer = (state, action) => {\\n  switch (action.type) {\\n    case 'CONNECT_WEB_SOCKET':\\n      return addTask(state, {\\n        type: 'socket',\\n        op: 'listen',\\n        url: 'wss://ws-beta.kraken.com/',\\n        actions: {\\n          connect: 'SOCKET_CONNECTED',\\n          disconnect: 'SOCKET_DISCONNECTED',\\n          error: 'SOCKET_ERROR',\\n          message: 'SOCKET_MESSAGE_RECEIVED'\\n        }\\n      })\\n\\n    case 'SUBSCRIBE_TO_CURRENCY_INFO':\\n      return addTask(state, {\\n        type: 'socket',\\n        op: 'send',\\n        data: {\\n          event: 'subscribe',\\n          pair: ['XBT/USD', 'XBT/EUR'],\\n          subscription: { name: 'ticker' }\\n        },\\n        actions: {\\n          sent: 'SOCKET_MESSAGE_SENT'\\n        }\\n      })\\n\\n    case 'DISCONNECT_WEB_SOCKET':\\n      return delTasks(state,\\n        (t) => t.type === 'socket')\\n\\n    case 'SOCKET_MESSAGE_RECEIVED':\\n      const { events } = state.liveCurrencyUpdates\\n      return {\\n        ...state,\\n        liveCurrencyUpdates: {\\n          ...state.liveCurrencyUpdates,\\n          events: events.length < MAX_EVENTS\\n            ? events.concat(action.payload)\\n            : events.slice(0, -1).concat(action.payload)\\n        }\\n      }\\n\\n    default:\\n      return state\\n  }\\n}\\n\\nexport default reduceReducers(reducer, taskReducer)\\n\""],"sourceRoot":""}